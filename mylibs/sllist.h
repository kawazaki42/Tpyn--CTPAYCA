/**
 * @file
 * @brief   Односвязный список. Интерфейсная часть
 * @author  Николай Ковалев
 */

// подключить только один раз
// чтобы избежать ошибок компиляции
// NOTE: директива `#pragma` - стандартная.
//       аргумент директивы `once` - распространенный, но не стандартный!
#pragma once


/// @brief Узел односвязного списка
struct SLList_node {
    /// Хранимое значение
    float data;

    /// Ссылка на следующий узел.
    /// `NULL`, если отсутствует
    /// (т.е. текущий узел - последний в списке).
    struct SLList_node *next;
};


/**
 * @brief Добавить элемент в начало списка (перед головой).
 * @param old_head текущая голова списка
 *                 (`NULL`, если требуется создать список)
 * @param data вещественное число (`float`) для добавления
 * @return Новую голову списка
 * 
 * @note
 *   Следует сохранить новую голову списка, например:
 *   ```c
 *       head = SLList_new_head(head, 3.14);
 *   ```
 *   Иначе она будет потеряна.
 */
struct SLList_node *SLList_new_head(struct SLList_node *old_head, float data);

/**
 * @brief Добавить элемент в конец списка (после хвоста).
 * @param old_tail текущий хвост списка
 *                 (`NULL`, если требуется создать список)
 * @param data вещественное число (`float`) для добавления
 * @return Новый хвост списка
 * @note
 *   Для дальнейшей работы с концом списка рекомендуется
 *   сохранить новый хвост, например:
 *   ```c
 *       tail = SLList_new_tail(tail, 3.14);
 *   ```
 *   Его можно будет получить при помощи цикла, но делать это
 *   несколько раз, например в цикле, будет затратно по времени.
 */
struct SLList_node *SLList_new_tail(struct SLList_node *old_tail, float data);

/**
 * @brief Очистить всю память, занимаемую списком.
 * @param head голова (первый элемент) списка.
 *             Если `NULL`, список пуст; действий не производится.
 * @details Итеративная (не рекурсивная) реализация
 */
void SLList_delete(struct SLList_node *head);